enum Status {
  ACTIVE
  INACTIVE
}

type TenantCategory {
	id: ID!
	name: String!
}

type TenantSettings {
	id: ID!
	replyToEmail: String!
	autoEscalation: Boolean
}

enum TenantStatus {
  INACTIVE
  ACTIVE
}

type Tenant {
  id: ID!
  name: String!
  category: TenantCategory!
	address: Address
  settings: TenantSettings
  notes: [TenantNotes]
  status: TenantStatus
}


input TenantInput {
  name: String!
  categoryId: ID!
  replyToEmail: String!
  autoEscalation: Boolean
  phone: String
  address: AddressInput!
  shortCode: String!
}

input UpdateTenantInput {
  name: String
  categoryId: ID
  replyToEmail: String
  autoEscalation: Boolean
  phone: String
  status: Status
  address: UpdateAddressInput
}

input UpdateTenantSettingsInput {
	replyToEmail: String
	phone: String
	autoEscalation: Boolean
}

input TenantFilter {
	searchTerm: String
	categoryId: ID
}

type Mutation {
	createTenant(input: TenantInput!): Tenant!
	updateTenant(tenantId: ID!, input: UpdateTenantInput!): Tenant!

}

type Query {
	getTenantDetails(id: ID!): Tenant
	getAllTenants(input: TenantFilter, pagination: Pagination): [Tenant]
	getTenantSummary: TenantSummary!
}